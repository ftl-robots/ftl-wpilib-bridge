import org.gradle.internal.os.OperatingSystem

def nativeClassifier = (
    OperatingSystem.current().isWindows() ?
    System.getProperty("os.arch") == "amd64" ? "windowsx86-64" : "windowsx86" :
    OperatingSystem.current().isMacOsX() ? "osxx86-64" :
    OperatingSystem.current().isLinux() ? "linuxx86-64" :
    null
)

def nativeCtreClassifier = (
    OperatingSystem.current().isWindows() ?
    System.getProperty("os.arch") == "amd64" ? "windows-x86-64" : "windows-x86" :
    OperatingSystem.current().isMacOsX() ? "0s x" :
    OperatingSystem.current().isLinux() ? "linux" :
    null
)

configurations.maybeCreate("wpilibNativeDeps")
dependencies {
    wpilibNativeDeps "edu.wpi.first.wpiutil:wpiutil-cpp:" + getWpiUtilVersion() + ":${nativeClassifier}@zip"
    wpilibNativeDeps "edu.wpi.first.hal:hal:" + allwpilibVersion() + ":${nativeClassifier}@zip"
    // TODO ADX GYRO ACCELEROMETER
    wpilibNativeDeps "edu.wpi.first.wpilibj:wpilibj-jniShared:" + allwpilibVersion() + ":${nativeClassifier}"
    // TODO CTRE Sim Override
}

task extract_wpilib {
    FileCollection extractedFiles = null as FileCollection

    configurations.wpilibNativeDeps.dependencies
        .matching { Dependency dep -> dep != null && configurations.wpilibNativeDeps.files(dep).size() > 0 }
        .all { dep ->
            def ziptree = project.zipTree(configurations.wpilibNativeDeps.files(dep).first())
            ["**/*.so*", "**/*.so", "**/*.dll", "**/*.dylib"].collect { String pattern ->
                def fc = ziptree.matching { PatternFilterable pat -> pat.include(pattern) }
                if (extractedFiles == null) extractedFiles = fc
                else extractedFiles += fc
            }
        }

    File dir = new File(project.buildDir, "extracted_native")
    if (dir.exists()) dir.deleteDir()
    dir.parentFile.mkdirs()

    if (project.tasks.findByName("packageNativeFiles")) {
        dependsOn packageNativeFiles
    }

    doLast {
        project.copy { CopySpec s ->
            s.from(project.files { extractedFiles.files })
            s.into(dir)
        }
    }

}